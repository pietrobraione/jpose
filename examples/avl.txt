class Object { }

class Void extends Object { }

class AvlNode extends Object {
  int element;
  int height;
  AvlNode left;
  AvlNode right;
}

class InsertParameters extends Object {
  int depth;
  int x;
  AvlNode arg;
}

class MaxParameters extends Object {
  int lhs;
  int rhs;
}

class AvlTree extends Object {
  AvlNode root;
  int depthBound;

  Void insertElem(int xx) :=
    let pInsert := new InsertParameters in
    let foo0 := (pInsert.depth := 1) in
    let foo1 := (pInsert.x := xx) in
    let foo2 := (pInsert.arg := (this.root)) in
    let foo3 := (this.root := (this.insert[pInsert])) in
    null;

  AvlNode insert(InsertParameters pInsert) :=
    if ((pInsert.arg) = null) then
      let t := new AvlNode in
      let foo4 := (t.element := (pInsert.x)) in
      let foo5 := (t.left := null) in
      let foo6 := (t.right := null) in
      let pMax := new MaxParameters in
      let foo7 := (pMax.lhs := (this.height[(t.left)])) in
      let foo8 := (pMax.rhs := (this.height[(t.right)])) in
      let foo9 := (t.height := ((this.max[pMax]) + 1)) in
      t
    else if ((this.depthBound) < (pInsert.depth)) then  
      let t := (pInsert.arg) in
      let pMax := new MaxParameters in
      let foo10 := (pMax.lhs := (this.height[(t.left)])) in
      let foo11 := (pMax.rhs := (this.height[(t.right)])) in
      let foo12 := (t.height := ((this.max[pMax]) + 1)) in
      t
    else if ((pInsert.x) < ((pInsert.arg).element)) then
      let t := (pInsert.arg) in
      let pInsertLeft := new InsertParameters in
      let foo13 := (pInsertLeft.depth := ((pInsert.depth) + 1)) in
      let foo14 := (pInsertLeft.x := (pInsert.x)) in
      let foo15 := (pInsertLeft.arg := (t.left)) in
      let foo16 := (t.left := (this.insert[pInsertLeft])) in
      if (((this.height[(t.left)]) - (this.height[(t.right)])) = 2) then
        let t2 := if ((pInsert.x) < ((t.left).element)) then
	  (this.rotateWithLeftChild[t])
	else if (~(((t.left).right) = null)) then
	  (this.doubleWithLeftChild[t]) else t in
        let pMax := new MaxParameters in
        let foo17 := (pMax.lhs := (this.height[(t2.left)])) in
        let foo18 := (pMax.rhs := (this.height[(t2.right)])) in
        let foo19 := (t2.height := ((this.max[pMax]) + 1)) in
        t2
      else let pMax := new MaxParameters in
      let foo20 := (pMax.lhs := (this.height[(t.left)])) in
      let foo21 := (pMax.rhs := (this.height[(t.right)])) in
      let foo22 := (t.height := ((this.max[pMax]) + 1)) in
      t
    else if (((pInsert.arg).element) < (pInsert.x)) then
      let t := (pInsert.arg) in
      let pInsertRight := new InsertParameters in
      let foo23 := (pInsertRight.depth := ((pInsert.depth) + 1)) in
      let foo24 := (pInsertRight.x := (pInsert.x)) in
      let foo25 := (pInsertRight.arg := (t.right)) in
      let foo26 := (t.right := (this.insert[pInsertRight])) in
      if (((this.height[(t.right)]) - (this.height[(t.left)])) = 2) then
        let t2 := if (((t.right).element) < (pInsert.x)) then
	  (this.rotateWithRightChild[t])
	else if (~(((t.right).left) = null)) then
	  (this.doubleWithRightChild[t]) else t in
        let pMax := new MaxParameters in
        let foo27 := (pMax.lhs := (this.height[(t2.left)])) in
        let foo28 := (pMax.rhs := (this.height[(t2.right)])) in
        let foo29 := (t2.height := ((this.max[pMax]) + 1)) in
        t2
      else let pMax := new MaxParameters in
      let foo30 := (pMax.lhs := (this.height[(t.left)])) in
      let foo31 := (pMax.rhs := (this.height[(t.right)])) in
      let foo32 := (t.height := ((this.max[pMax]) + 1)) in
      t
    else
      let t := (pInsert.arg) in
      let pMax := new MaxParameters in
      let foo33 := (pMax.lhs := (this.height[(t.left)])) in
      let foo34 := (pMax.rhs := (this.height[(t.right)])) in
      let foo35 := (t.height := ((this.max[pMax]) + 1)) in
      t;

  int max(MaxParameters pMax) :=
    if ((pMax.lhs) < (pMax.rhs)) then (pMax.rhs) else (pMax.lhs);

  int height(AvlNode t) :=
    if (t = null) then (0 - 1) else (t.height);

  Void rotateWithLeftChild(AvlNode k2) :=
    let k1 := (k2.left) in
    let foo36 := (k2.left := (k1.right)) in
    let foo37 := (k1.right := k2) in
    let pMax := new MaxParameters in
    let foo38 := (pMax.lhs := (this.height[(k2.left)])) in
    let foo39 := (pMax.rhs := (this.height[(k2.right)])) in
    let foo40 := (k2.height := ((this.max[pMax]) + 1)) in
    let foo41 := (pMax.lhs := (this.height[(k1.left)])) in
    let foo42 := (pMax.rhs := (k2.height)) in
    let foo43 := (k1.height := ((this.max[pMax]) + 1)) in
    k1;

  Void rotateWithRightChild(AvlNode k1) :=
    let k2 := (k1.right) in
    let foo44 := (k1.right := (k2.left)) in
    let foo45 := (k2.left := k1) in
    let pMax := new MaxParameters in
    let foo46 := (pMax.lhs := (this.height[(k1.left)])) in
    let foo47 := (pMax.rhs := (this.height[(k1.right)])) in
    let foo48 := (k1.height := ((this.max[pMax]) + 1)) in
    let foo49 := (pMax.lhs := (this.height[(k2.right)])) in
    let foo50 := (pMax.rhs := (k1.height)) in
    let foo51 := (k2.height := ((this.max[pMax]) + 1)) in
    k2;

  Void doubleWithLeftChild(AvlNode k3) :=
    let foo52 := (k3.left := (this.rotateWithRightChild[(k3.left)])) in
    (this.rotateWithLeftChild[k3]);

  Void doubleWithRightChild(AvlNode k1) :=
    let foo53 := (k1.right := (this.rotateWithLeftChild[(k1.right)])) in
    (this.rotateWithRightChild[k1]);
}

